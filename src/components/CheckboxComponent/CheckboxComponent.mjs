// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as IconCheckmark from "../icons/IconCheckmark/IconCheckmark.mjs";
import * as IconMinusLarge from "../icons/IconMinusLarge/IconMinusLarge.mjs";
import CheckboxComponentModuleScss from "./CheckboxComponent.module.scss";

var styles = CheckboxComponentModuleScss;

function CheckboxComponent(props) {
  var className = props.className;
  var style = props.style;
  var children = props.children;
  var updateModelValue = props.updateModelValue;
  var mode = props.mode;
  var type_ = props.type_;
  var isError = props.isError;
  var disabled = props.disabled;
  var modelValue = props.modelValue;
  var modelValue$1 = modelValue !== undefined ? modelValue : /* False */1;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var isError$1 = isError !== undefined ? isError : false;
  var type_$1 = type_ !== undefined ? type_ : /* M */0;
  var mode$1 = mode !== undefined ? mode : /* Normal */0;
  var style$1 = style !== undefined ? style : ({});
  var className$1 = className !== undefined ? className : "";
  var match = React.useState(function () {
        return false;
      });
  var setIsFocused = match[1];
  var onFocus = function (param) {
    if (!disabled$1) {
      return Curry._1(setIsFocused, (function (param) {
                    return true;
                  }));
    }
    
  };
  var match$1 = React.useState(function () {
        if (mode$1) {
          return modelValue$1;
        } else if (modelValue$1 === /* True */0) {
          return /* True */0;
        } else {
          return /* False */1;
        }
      });
  var setState = match$1[1];
  var state = match$1[0];
  var onBlur = function (param) {
    Curry._1(setIsFocused, (function (param) {
            return false;
          }));
  };
  var onChange = function (param) {
    if (!disabled$1) {
      Curry._1(setState, (function (s) {
              if (s === /* True */0) {
                return /* False */1;
              } else {
                return /* True */0;
              }
            }));
      return Curry._1(updateModelValue, state);
    }
    
  };
  var onKeyUp = function (e) {
    if (disabled$1) {
      return ;
    }
    var key = e.keyCode;
    if (key !== 13 && key !== 32) {
      return ;
    } else {
      onChange(undefined);
      e.preventDefault();
      return ;
    }
  };
  var onMouseDown = function (param) {
    
  };
  var onDoubleClick = function (e) {
    e.preventDefault();
  };
  return React.createElement("div", undefined, React.createElement("div", {
                  className: Cx.cx([
                        "foura__trade_elements__elements_palette",
                        styles["input-wrapper"],
                        match[0] ? styles.focused : "",
                        disabled$1 ? styles.disabled : "",
                        isError$1 ? styles.error : "",
                        state === /* True */0 || state === /* Parted */2 ? styles.checked : "",
                        type_$1 === /* S */1 ? styles.small : "",
                        className$1
                      ]),
                  style: style$1,
                  tabIndex: 0,
                  onKeyUp: onKeyUp,
                  onFocus: onFocus,
                  onBlur: onBlur,
                  onClick: onChange,
                  onDoubleClick: onDoubleClick,
                  onMouseDown: onMouseDown
                }, React.createElement("div", {
                      className: styles["checkbox-wrapper"]
                    }, React.createElement("div", {
                          className: styles.checkbox
                        }, state === /* Parted */2 ? React.createElement(IconMinusLarge.make, {
                                className: styles["check-icon"]
                              }) : React.createElement(IconCheckmark.make, {
                                className: styles["check-icon"]
                              }))), children !== undefined ? React.createElement("span", {
                        className: styles.caption
                      }, Caml_option.valFromOption(children)) : null));
}

var make = CheckboxComponent;

export {
  make ,
}
/* styles Not a pure module */
