// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import ButtonComponentModuleScss from "./ButtonComponent.module.scss";

var styles = ButtonComponentModuleScss;

function ButtonComponent(props) {
  var className = props.className;
  var style = props.style;
  var iconDouble2Slot = props.iconDouble2Slot;
  var iconDouble1Slot = props.iconDouble1Slot;
  var iconSingleSlot = props.iconSingleSlot;
  var iconWithTextSlot = props.iconWithTextSlot;
  var forceActive = props.forceActive;
  var disabled = props.disabled;
  var typeColor = props.typeColor;
  var typeSize = props.typeSize;
  var name = props.name;
  var value = props.value;
  var type_ = props.type_;
  var value$1 = value !== undefined ? value : "";
  var name$1 = name !== undefined ? name : "";
  var typeSize$1 = typeSize !== undefined ? typeSize : /* M */2;
  var typeColor$1 = typeColor !== undefined ? typeColor : /* Primary */0;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var forceActive$1 = forceActive !== undefined ? forceActive : false;
  var style$1 = style !== undefined ? style : ({});
  var className$1 = className !== undefined ? className : "";
  var main = React.useRef(null);
  var input = React.useRef(null);
  React.useEffect((function () {
          if (disabled$1) {
            Belt_Option.forEach(Caml_option.nullable_to_opt(main.current), (function (el) {
                    el.blur();
                  }));
          }
          
        }), [disabled$1]);
  var inputEl = type_ !== undefined ? React.createElement("input", {
          ref: Caml_option.some(input),
          className: styles["hidden-input"],
          name: name$1,
          type: type_,
          value: value$1
        }) : null;
  var slotEl;
  if (iconSingleSlot !== undefined) {
    slotEl = React.createElement("div", {
          className: styles["icon-single"]
        }, Caml_option.valFromOption(iconSingleSlot));
  } else if (iconDouble1Slot !== undefined) {
    var t = Caml_option.valFromOption(iconDouble1Slot);
    slotEl = iconDouble2Slot !== undefined ? React.createElement(React.Fragment, undefined, React.createElement("div", {
                className: styles["icon-double"]
              }, t), React.createElement("div", {
                className: styles["icon-double"]
              }, Caml_option.valFromOption(iconDouble2Slot))) : React.createElement("div", {
            className: styles["icon-double"]
          }, t);
  } else {
    slotEl = iconWithTextSlot !== undefined ? React.createElement("div", {
            className: styles["icon-with-text"]
          }, Caml_option.valFromOption(iconWithTextSlot)) : React.createElement("div", {
            className: styles.text
          }, value$1);
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: Cx.cx([
                        "foura__trade_elements__elements_palette",
                        styles.root,
                        typeSize$1 === /* L */0 ? styles.large : "",
                        typeSize$1 === /* S */1 ? styles.small : "",
                        iconWithTextSlot !== undefined ? styles["root-with-icon"] : "",
                        iconSingleSlot !== undefined ? styles["root-with-icon-single"] : "",
                        iconDouble1Slot !== undefined ? styles["root-with-icon-double"] : "",
                        className$1
                      ]),
                  style: style$1
                }, React.createElement("div", {
                      ref: Caml_option.some(main),
                      className: Cx.cx([
                            styles["root-button"],
                            disabled$1 ? styles.disabled : "",
                            typeColor$1 === /* Secondary */1 ? styles.secondary : "",
                            typeColor$1 === /* Tertiary */2 ? styles.tertiary : "",
                            forceActive$1 ? styles["force-active"] : ""
                          ]),
                      tabIndex: 0,
                      onClick: props.onClick
                    }, React.createElement("div", {
                          className: styles.content
                        }, slotEl)), inputEl));
}

var make = ButtonComponent;

export {
  make ,
}
/* styles Not a pure module */
