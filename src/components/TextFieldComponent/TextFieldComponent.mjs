// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../../utils/Utils.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Js_option from "rescript/lib/es6/js_option.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as IconExclamationMarkTriangleFill from "../icons/IconExclamationMarkTriangleFill/IconExclamationMarkTriangleFill.mjs";
import TextFieldComponentModuleScss from "./TextFieldComponent.module.scss";

var styles = TextFieldComponentModuleScss;

function TextFieldComponent(props) {
  var props$1 = props.props;
  var children = props.children;
  var contentSlot = props.contentSlot;
  var onKeyUp = props.onKeyUp;
  var onBlur = props.onBlur;
  var onFocus = props.onFocus;
  var updateModelValue = props.updateModelValue;
  var onInput = props.onInput;
  var onChange = props.onChange;
  var updateModelValueOnInput = props.updateModelValueOnInput;
  var forceFocusState = props.forceFocusState;
  var forceWithContentState = props.forceWithContentState;
  var autofocus = props.autofocus;
  var autoselect = props.autoselect;
  var isError = props.isError;
  var disabled = props.disabled;
  var modelValue = props.modelValue;
  var type_ = props.type_;
  var autocomplete = props.autocomplete;
  var name = props.name;
  var name$1 = name !== undefined ? name : "";
  var autocomplete$1 = autocomplete !== undefined ? autocomplete : "on";
  var type_$1 = type_ !== undefined ? type_ : "text";
  var modelValue$1 = modelValue !== undefined ? modelValue : "";
  var disabled$1 = disabled !== undefined ? disabled : false;
  var isError$1 = isError !== undefined ? isError : false;
  var autoselect$1 = autoselect !== undefined ? autoselect : false;
  var autofocus$1 = autofocus !== undefined ? autofocus : false;
  var forceWithContentState$1 = forceWithContentState !== undefined ? forceWithContentState : false;
  var forceFocusState$1 = forceFocusState !== undefined ? forceFocusState : false;
  var updateModelValueOnInput$1 = updateModelValueOnInput !== undefined ? updateModelValueOnInput : false;
  var props$2 = props$1 !== undefined ? props$1 : ({});
  var className = Utils.getClassNameFromProps(props$2);
  var filteredProps = Utils.filterProps(props$2);
  var input = React.useRef(null);
  var content = React.useRef(null);
  var match = React.useState(function () {
        return modelValue$1;
      });
  var setCurrentValue = match[1];
  var currentValue = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setContentLeftPadding = match$1[1];
  var updateContentPadding = function (param) {
    if (contentSlot !== undefined) {
      return Belt_Option.forEach(Caml_option.nullable_to_opt(content.current), (function (el) {
                    var rect = el.getBoundingClientRect();
                    var w = rect.width;
                    Curry._1(setContentLeftPadding, (function (param) {
                            return w | 0;
                          }));
                  }));
    }
    
  };
  React.useEffect((function () {
          var nav = window.navigator;
          var ua = nav.userAgent;
          var re1 = new RegExp("iPad", "i");
          var re2 = new RegExp("iPhone", "i");
          var isiOS = re1.test(ua) || re2.test(ua);
          if (autoselect$1 && !isiOS) {
            Belt_Option.forEach(Caml_option.nullable_to_opt(input.current), (function (el) {
                    el.focus();
                  }));
          }
          if (contentSlot !== undefined) {
            updateContentPadding(undefined);
          }
          
        }), [
        autoselect$1,
        content
      ]);
  var match$2 = React.useState(function () {
        return false;
      });
  var setIsFocusedInput = match$2[1];
  var isFocused = forceFocusState$1 || match$2[0];
  var handleFocus = function (param) {
    Curry._1(setIsFocusedInput, (function (param) {
            return true;
          }));
    if (onFocus !== undefined) {
      return Curry._1(onFocus, undefined);
    }
    
  };
  var handleBlur = function (param) {
    Curry._1(setIsFocusedInput, (function (param) {
            return false;
          }));
    if (onBlur !== undefined) {
      return Curry._1(onBlur, undefined);
    }
    
  };
  var handleChange = function (e) {
    var v = e.currentTarget;
    var value = v.value;
    Curry._1(setCurrentValue, (function (param) {
            return value;
          }));
    if (onChange !== undefined) {
      Curry._1(onChange, value);
    }
    if (updateModelValue !== undefined) {
      return Curry._1(updateModelValue, value);
    }
    
  };
  var handleInput = function (e) {
    var v = e.currentTarget;
    var value = v.value;
    Curry._1(setCurrentValue, (function (param) {
            return value;
          }));
    if (onInput !== undefined) {
      Curry._1(onInput, value);
    }
    if (updateModelValueOnInput$1 && updateModelValue !== undefined) {
      Curry._1(updateModelValue, value);
    }
    Belt_Option.forEach(Caml_option.nullable_to_opt(input.current), (function (el) {
            var startPos = el.selectionStart;
            if (startPos !== undefined) {
              el.setSelectionRange(startPos, startPos);
              return ;
            }
            
          }));
  };
  var isWithContent = forceWithContentState$1 || currentValue !== "" || Js_option.isSome(contentSlot);
  var handleKeyUp = function (e) {
    if (onKeyUp !== undefined) {
      return Curry._1(onKeyUp, e);
    }
    
  };
  var newrecord = Caml_obj.obj_dup(filteredProps);
  return React.createElement("div", (newrecord.className = styles.root, newrecord), React.createElement("div", {
                  className: Cx.cx([
                        Utils.getTradePalleteClass(undefined),
                        styles["input-wrapper"],
                        isFocused ? styles.focused : "",
                        isWithContent ? styles["with-text"] : "",
                        disabled$1 ? styles.disabled : "",
                        isError$1 ? styles.error : "",
                        className
                      ])
                }, React.createElement("input", {
                      ref: Caml_option.some(input),
                      className: Cx.cx([
                            "font-4ait-elements_text",
                            styles.input
                          ]),
                      style: {
                        paddingLeft: "" + String(16 + match$1[0] | 0) + "px"
                      },
                      autoComplete: autocomplete$1,
                      autoFocus: autofocus$1,
                      disabled: disabled$1,
                      name: name$1,
                      type: type_$1,
                      value: currentValue,
                      onKeyUp: handleKeyUp,
                      onFocus: handleFocus,
                      onBlur: handleBlur,
                      onChange: handleChange,
                      onInput: handleInput
                    }), contentSlot !== undefined ? React.createElement("div", {
                        ref: Caml_option.some(content),
                        style: {
                          display: "flex",
                          height: "22px",
                          left: "16px",
                          position: "absolute",
                          top: "22px",
                          alignItems: "center",
                          justifyContent: "center"
                        }
                      }, React.createElement("div", undefined, Caml_option.valFromOption(contentSlot))) : null, React.createElement("span", {
                      className: styles.caption
                    }, children !== undefined ? Caml_option.valFromOption(children) : null), React.createElement("div", {
                      className: styles["group-icon"]
                    }, React.createElement(IconExclamationMarkTriangleFill.make, {
                          props: {
                            className: Cx.cx([
                                  styles["icon-status"],
                                  styles["icon-warning"]
                                ])
                          }
                        }))));
}

var make = TextFieldComponent;

export {
  make ,
}
/* styles Not a pure module */
